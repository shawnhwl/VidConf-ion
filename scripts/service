#!/bin/bash
#set -eux

APP_DIR=$(cd `dirname $0`/../; pwd)
cd $APP_DIR
mkdir -p $APP_DIR/logs
SERVICE=$1
#COMMAND=$APP_DIR/bin/$SERVICE
# CONFIG=$APP_DIR/configs/$SERVICE.toml
# PID_FILE=$APP_DIR/configs/$SERVICE.pid
# LOG_FILE=$APP_DIR/logs/$SERVICE.log

ACTION=$1
SERVICE=$2

show_help()
{
    echo ""
    echo "Usage: ./service {start|stop|status} {app-room-recorder|app-room-playback|app-room-mgmt|app-room|signal|islb|sfu}"
    echo ""
}

if [[ $# -ne 2 ]] ; then
    show_help
    exit 1
fi

function start()
{
    COMMAND=$APP_DIR/bin/$1
    CONFIG=$APP_DIR/configs/$SERVICE.toml
    PID_FILE=$APP_DIR/configs/$SERVICE.pid
    LOG_FILE=$APP_DIR/logs/$SERVICE.log

    count=`ps -ef |grep " $COMMAND " |grep -v "grep" |wc -l`
    if [ 0 != $count ];then
        ps aux | grep " $COMMAND " | grep -v "grep"
        echo "already start"
        return 1;
    fi

    if [ ! -r $CONFIG ]; then
        echo "$CONFIG not exsist"
        return 1;
    fi

    BUILD_PATH=$APP_DIR/cmd/$SERVICE
    if [[ "$SERVICE" == app-room ]]; then
        BUILD_PATH=$APP_DIR/apps/${SERVICE:4}
    fi
    if [[ "$SERVICE" == app-room-mgmt ]]; then
        BUILD_PATH=$APP_DIR/apps/${SERVICE:4}
    fi
    if [[ "$SERVICE" == app-room-sentry ]]; then
        BUILD_PATH=$APP_DIR/apps/${SERVICE:4}
    fi
    if [[ "$SERVICE" == app-room-recorder ]]; then
        BUILD_PATH=$APP_DIR/apps/${SERVICE:4}
    fi
    if [[ "$SERVICE" == app-room-playback ]]; then
        BUILD_PATH=$APP_DIR/apps/${SERVICE:4}
    fi

    cd $BUILD_PATH
    echo "go build -o $COMMAND"
    go build -o $COMMAND
    cd $APP_DIR

    echo "nohup $COMMAND -c $CONFIG >$LOG_FILE 2>&1 &"
    nohup $COMMAND -c $CONFIG >$LOG_FILE 2>&1 &
    pid=$!
    echo "$pid" > $PID_FILE
    rpid=`ps aux | grep $pid |grep -v "grep" | awk '{print $2}'`
    if [[ $pid != $rpid ]];then
        echo "start failly."
        rm  $PID_FILE
        return 1
    fi
}

function stop(){
    PID_FILE=$APP_DIR/configs/$1.pid
    echo "$PID_FILE......"

    echo "stop $SERVICE..."
    PID=`cat $PID_FILE`
    if [ ! -n "$PID" ]; then
        PID=`ps -ef | grep "$1" | grep -v "grep" | grep -v "service" | awk '{print $2}'`
        if [ ! -n "$PID" ]; then
            return 1
        fi
    fi
    SUB_PIDS=`pgrep -P $PID`
    if [ -n "$SUB_PIDS" ]; then
        GRANDSON_PIDS=`pgrep -P $SUB_PIDS`
    fi

    # echo "kill $PID $SUB_PIDS $GRANDSON_PIDS"
    kill $PID $SUB_PIDS $GRANDSON_PIDS
    rm -rf $PID_FILE
    echo "stop ok"
}

function restart() {
    echo " $1"
    stop $1
    start $1
}

function status() {
    if [[ "$SERVICE" == "" ]]; then
        exit 1
    fi
    if [[ "$SERVICE" == app-room-recorder ]]; then
        SERVICE=${SERVICE:0:15}
    fi
    if [[ "$SERVICE" == app-room-playback ]]; then
        SERVICE=${SERVICE:0:15}
    fi
    if [ `pgrep -x $SERVICE` ]; then
        echo -e "\033[32m[OK]\033[0m: $SERVICE is running"
    else
        echo -e "\033[31m[Failed]\033[0m: $SERVICE is not running, run by service scripts"
        show_help
    fi
}

if [[ "$ACTION" != "start" && "$ACTION" != "stop" && "$ACTION" != "status" && "$ACTION" != "restart" ]]; then
    show_help
    exit 1
fi

if [[ "$SERVICE" != "app-room-recorder" && "$SERVICE" != "app-room-playback" && "$SERVICE" != "app-room-sentry" && "$SERVICE" != "app-room-mgmt" && "$SERVICE" != "app-room" && "$SERVICE" != "signal" && "$SERVICE" != "islb" && "$SERVICE" != "sfu" ]]; then
    show_help
    exit 1
fi

if [[ "$ACTION" == "start" ]]; then
    start $SERVICE
    exit 0
fi

if [[ "$ACTION" == "stop" ]]; then
    stop $SERVICE
    exit 0
fi

if [[ "$ACTION" == "status" ]]; then
    status $SERVICE
    exit 0
fi

if [[ "$ACTION" == "restart" ]]; then
    restart $SERVICE
    exit 0
fi
